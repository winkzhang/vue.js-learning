组件 可以扩展HTML元素，封装可重用的HTML代码，我们可以将组件看做自定义的HTML元素。
 
组件 的创建和注册
    三个步骤：创建组件构造器、注册组件和使用组件
    
    调用Vue.extend()方法创建组件构造器
    调用Vue.component()方法注册组件
    在Vue实例的作用范围内使用组件
    
    html:
    <div id="app">
        <my-component></my-component>
    </div>
    
    js:
    // 创建一个组件构造器
    var myComponent = Vue.extend({
        template: '<div>This is my first component!</div>'
    })
    // 注册组件，并指定组件的标签，组件的HTML标签为<my-component>
    Vue.component('my-component', myComponent)
    // 组件应挂载到某个Vue实例下
    new Vue({
        el:'#app'
    });
 
全局注册 和局部注册
全局 ：可以在任意Vue实例下使用
局部 注册：
    html:
    <div id="app">
        // my-component只能在#app下使用
        <my-component></my-component>
    </div>
    
    js:
    // 创建一个组件构造器
    var myComponent = Vue.extend({
        template: '<div>This is my first component!</div>'
    })
    new Vue({
        el:'#app',
        components: {
            // 将myComponent组件注册到Vue实例下
            'my-component': myComponent
        }
    });
 
父组件 和子组件
    html:
    <div id="app">
        <parent-component>
        </parent-component>
    </div>
    
    js:
    var Child = Vue.extend({
        template: '<p>This is a child component!</p>'
    })
    var Parent = Vue.extend({
        //在Parent组件内使用<child-component>标签
        template: '<p>This is a Parent component</p><child-component></child-component>',
        components: {
            //局部注册Child组件，该组件只能在Parent组件内使用
            'child-component': Child
        }
    }）
    //全局注册Parent组件
    Vue.component('parent-component', Parent)
    new Vue({
        el:'#app'
    })
    Child组件是在Parent组件中注册的，它只能在Parent组件中使用。
    子组件只能在父组件的template中使用。

组件注册语法糖
  使用Vue.component()直接创建和注册组件：
  // 全局注册，my-component1是标签名称
  Vue.component('my-component1', {
      template: '<div>This is the first component!</div>'
  })
  
  var vm1 = new Vue({
      el: '#app1'
  })
  Vue在背后会自动调用Vue.extend()。
  
  在选项对象的components属性中实现局部注册：
  var vm2 = new Vue({
      el: '#app2',
      components: {
          // 局部注册，my-component2是标签名称
          'my-component2': {
              template: '<div>This is the second component!</div>'
           },
           // 局部注册，my-component3是标签名称
           'my-component3': {
               template: '<div>This is the third component!</div>'
           }
       }
   })
   
使用script或template标签
    使用<script>标签
    <body>
        <div id="app">
            <my-component></my-component>
        </div>
        
        <script type="text/x-template" id="myComponent">
            <div>This is a component!</div>
        </script>
    </body>
    <script src="js/vue.js"></script>
    <script>
        Vue.component('my-component', {
            template: '#myComponent'
        })
        
        new Vue({
            el: '#app'
         })
     </script>
     Vue.js根据template中的id来查找对应的元素，然后将这个元素内的HTML作为模板进行编译。
     type=text/x-template，告诉浏览器这不是一段js脚本。
     
     使用<tempalte>标签
     不需要指定type属性
     <body>
        <div id="app">
            <my-component></my-component>
        </div>
        
        <template id="myComponent">
            <div>This is a component!</div>
        </template>
    </body>
    <script src="js/vue.js"></script>
    <script>
        Vue.component('my-component', {
            template: '#myComponent'
        })
        
        new Vue({
            el: '#app'
         })
     </script>
     
内联模板

如果子组件有 inline-template 特性，组件将把它的内容当作它的模板，而不是把它当作分发内容。这让模板更灵活。
<my-component inline-template>
  <div>
    <p>These are compiled as the component's own template.</p>
    <p>Not parent's transclusion content.</p>
  </div>
</my-component>


组件的el和data选项
    在定义组件的选项时，data和el选项必须使用函数。
    Vue.component('my-component', {
        data: function() {
            return {a : 1}
        }
    })
    
使用props
    组件实例的作用域是孤立的，不能在子组件的模板内直接引用父组件的数据。可以使用props把数据传给子组件。
    var vm = new Vue({
        el: '#app',
        data: {
            name: 'keepfool',
            age: 28
        },
        components: {
            'my-component': {
                template: '#myComponent',
                props: ['myName', 'myAge']
             }
         }
     })
     
     定义子组件的HTML模板：
     <template id="myComponent">
         <table>
             <tr>
                 <th colspan="2">
                     子组件数据
                 </th>
              </tr>
              <tr>
                  <td>my name</td>
                  <td>{{ myName }}</td>
              </tr>
              <tr>
                  <td>my age</td>
                  <td>{{ myAge }} </td>
              </tr>
          </table>
      </template>
      
      将父组件数据通过已定义好的props属性传递给子组件：
      <div id="app">
          <my-component v-bind:my-name="name" v-bind:my-age="age"></my-component>
      </div>
      HTML特性不区分大小写，驼峰myName要写为my-name。

prop的绑定类型

单向绑定
prop默认是单向绑定，当父组件的属性变化时，将传导给子组件，但是反过来不会。

注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。

Prop验证

编译作用域
    组件的作用域是组件模板包含的HTML片段，组件模板内容之外的就不是组件的作用域了。
    组件选项对象中的数据是在组件模板中使用的。
    new Vue({
        el: '#app',
        data: {
            display: true
        },
        components: {
            'my-component': {
                template: '#myComponent',
                data: function() {
                    return {
                        msg: 'This is a component!',
                        display: false
                    }
                },
                methods: {
                    showMsg: function() {
                        alert(this.msg)
                    }
                }
            }
        }
    })
    <div id="app">
        <my-component v-show="display">
        </my-component>
    </div>
    display数据，是来源于Vue实例。
    父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。
    在子组件中定义的数据，只能用在子组件的模板。在父组件中定义的数据，只能用在父组件的模板。
    
使用Slot

单个Slot
    内容插槽

指定名称的slot
    如果需要多个内容插槽，可以为slot元素指定name属性。
    
作用域插槽
    子组件中：
    <div class="child">
      <slot text="hello from child"></slot>
    </div>
    将数据传递到插槽
    父级中：
    <div class="parent">
      <child>
        <template scope="props">
          <span>hello from parent</span>
          <span>{{ props.text }}</span>
        </template>
      </child>
    </div>
    具有特殊属性 scope 的 <template> 元素，表示它是作用域插槽的模板。
    scope 的值对应一个临时变量名，此变量接收从子组件中传递的 prop 对象。
    渲染之后的输出结果：
    <div class="parent">
      <div class="child">
        <span>hello from parent</span>
        <span>hello from child</span>
      </div>
    </div>
        
父子组件之间的访问
    父组件访问子组件：使用$children或$refs
    子组件访问父组件：使用$parent
    子组件访问根组件：使用$root

    组件个数较多时，通过序号访问子组件不是很方便。
    在子组件上使用v-ref指令，可以给子组件指定一个索引ID。
    
自定义事件

派发事件 $dispatch()
1、子组件的button元素绑定了click事件，该事件指向notify方法
2、子组件的notify方法在处理时，调用了$dispatch，将事件派发到父组件的child-msg事件，并给该事件提供了一个msg参数。
3、父组件的events选项中定义了child-msg事件，父组件接收到子组件的派发后，调用chld-msg事件。

广播事件 $broadcast()

监听事件 $on()

在它上面触发事件 $emit()

给组件绑定原生事件
在某个组件的根元素上监听一个原生事件：使用 .native 修饰 v-on
<my-component v-on:click.native="doTheThing"></my-component>



要确保在初始化根实例之前注册了组件
    // 注册
    Vue.component('my-component', {
      template: '<div>A custom component!</div>'
    })
    // 创建根实例
    new Vue({
      el: '#example'
    })
    
在自定义组件中使用受限制的元素会导致一些问题<ul> <ol> <table> <select>
<table>
  <my-row>...</my-row>
</table>
自定义组件 <my-row> 被认为是无效的内容
<table>
  <tr is="my-row"></tr>
</table>

初学者常犯的一个错误是使用字面量语法传递数值：
<!-- 传递了一个字符串"1" -->
<comp some-prop="1"></comp>
因为它是一个字面 prop ，它的值以字符串 "1" 而不是以实际的数字传下去。如果想传递一个实际的 JavaScript 数字，需要使用 v-bind ，从而让它的值被当作 JavaScript 表达式计算：
<!-- 传递实际的数字 -->
<comp v-bind:some-prop="1"></comp>

动态组件
var vm = new Vue({
  el: '#example',
  data: {
    currentView: 'home'
  },
  components: {
    home: { /* ... */ },
    posts: { /* ... */ },
    archive: { /* ... */ }
  }
})

<component v-bind:is="currentView">
  <!-- 组件在 vm.currentview 变化时改变！ -->
</component>

keep-alive
如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。

使用v-once的低开销静态组件
当组件中包含大量静态内容时，可以考虑使用 v-once 将渲染结果缓存起来，就像这样：
Vue.component('terms-of-service', {
  template: '
    <div v-once>
      <h1>Terms of Service</h1>
      ... a lot of static content ...
    </div>
  '
})



